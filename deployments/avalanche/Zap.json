{
  "address": "0x2C7B8e971c704371772eDaf16e0dB381A8D02027",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DAI",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "JOE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAVAX",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_joe",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isLP",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "removeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "routePair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "setNotLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "route",
          "type": "address"
        }
      ],
      "name": "setRoutePairAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "zapIn",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "zapInToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "zapOut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xe915451230093225c48e26907335329879c787acbea4414ef842453e9d563b9a",
  "receipt": {
    "to": null,
    "from": "0x5D3e4C0FE11e0aE4c32F0FF74B4544C49538AC61",
    "contractAddress": "0x2C7B8e971c704371772eDaf16e0dB381A8D02027",
    "transactionIndex": 0,
    "gasUsed": "2631592",
    "logsBloom": "0x
    "blockHash": "0x0f16f09bb554d9b5987f5f628ec8b4840cd2554faa8933f4a312652d9c347911",
    "transactionHash": "0xe915451230093225c48e26907335329879c787acbea4414ef842453e9d563b9a",
    "logs": [],
    "blockNumber": 2619798,
    "cumulativeGasUsed": "2631592",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "4d1dd50cb145a5817b82067d3276f180",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"JOE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAVAX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_joe\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isLP\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"routePair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setNotLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"route\",\"type\":\"address\"}],\"name\":\"setRoutePairAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"zapIn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"zapInToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"zapOut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Zap.sol\":\"Zap\"},\"evmVersion\":\"istanbul\",\"libraries\":{\"__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe422bf8bc61fe71acb27de4631400cdbb9b532df4de4f255eab093ac356f9745\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n * \\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n * \\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { cs := extcodesize(self) }\\n        return cs == 0;\\n    }\\n}\\n\",\"keccak256\":\"0xae7044b7c89ed74327b0979ae6f317c65d87b8d17a42d0c62d698d77d5de5511\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"contracts/Zap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.6.12;\\n\\n/*\\n * Trader Joe\\n * MIT License; modified from PancakeBunny\\n *\\n */\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./traderjoe/interfaces/IJoePair.sol\\\";\\nimport \\\"./traderjoe/interfaces/IJoeRouter02.sol\\\";\\nimport \\\"./traderjoe/interfaces/IWAVAX.sol\\\";\\n\\ncontract Zap is OwnableUpgradeable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== CONSTANT VARIABLES ========== */\\n\\n    address public JOE;\\n    address public constant USDT = 0xde3A24028580884448a5397872046a019649b084;\\n    address public constant DAI = 0xbA7dEebBFC5fA1100Fb055a87773e1E99Cd3507a;\\n    address public constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n\\n    IJoeRouter02 private ROUTER;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    mapping(address => bool) private notLP;\\n    mapping(address => address) private routePairAddresses;\\n    address[] public tokens;\\n\\n    /* ========== INITIALIZER ========== */\\n\\n    function initialize(address _joe, address _router) external initializer {\\n        __Ownable_init();\\n        require(owner() != address(0), \\\"ZapETH: owner must be set\\\");\\n\\n        JOE = _joe;\\n        ROUTER = IJoeRouter02(_router);\\n        setNotLP(WAVAX);\\n        setNotLP(USDT);\\n        setNotLP(JOE);\\n        setNotLP(DAI);\\n    }\\n\\n    receive() external payable {}\\n\\n    /* ========== View Functions ========== */\\n\\n    function isLP(address _address) public view returns (bool) {\\n        return !notLP[_address];\\n    }\\n\\n    function routePair(address _address) external view returns (address) {\\n        return routePairAddresses[_address];\\n    }\\n\\n    /* ========== External Functions ========== */\\n\\n    function zapInToken(\\n        address _from,\\n        uint256 amount,\\n        address _to\\n    ) external {\\n        IERC20(_from).safeTransferFrom(msg.sender, address(this), amount);\\n        _approveTokenIfNeeded(_from);\\n\\n        if (isLP(_to)) {\\n            IJoePair pair = IJoePair(_to);\\n            address token0 = pair.token0();\\n            address token1 = pair.token1();\\n            if (_from == token0 || _from == token1) {\\n                // swap half amount for other\\n                address other = _from == token0 ? token1 : token0;\\n                _approveTokenIfNeeded(other);\\n                uint256 sellAmount = amount.div(2);\\n                uint256 otherAmount = _swap(\\n                    _from,\\n                    sellAmount,\\n                    other,\\n                    address(this)\\n                );\\n                ROUTER.addLiquidity(\\n                    _from,\\n                    other,\\n                    amount.sub(sellAmount),\\n                    otherAmount,\\n                    0,\\n                    0,\\n                    msg.sender,\\n                    block.timestamp\\n                );\\n            } else {\\n                uint256 avaxAmount = _swapTokenForAVAX(\\n                    _from,\\n                    amount,\\n                    address(this)\\n                );\\n                _swapAVAXToLP(_to, avaxAmount, msg.sender);\\n            }\\n        } else {\\n            _swap(_from, amount, _to, msg.sender);\\n        }\\n    }\\n\\n    function zapIn(address _to) external payable {\\n        _swapAVAXToLP(_to, msg.value, msg.sender);\\n    }\\n\\n    function zapOut(address _from, uint256 amount) external {\\n        IERC20(_from).safeTransferFrom(msg.sender, address(this), amount);\\n        _approveTokenIfNeeded(_from);\\n\\n        if (!isLP(_from)) {\\n            _swapTokenForAVAX(_from, amount, msg.sender);\\n        } else {\\n            IJoePair pair = IJoePair(_from);\\n            address token0 = pair.token0();\\n            address token1 = pair.token1();\\n            if (token0 == WAVAX || token1 == WAVAX) {\\n                ROUTER.removeLiquidityAVAX(\\n                    token0 != WAVAX ? token0 : token1,\\n                    amount,\\n                    0,\\n                    0,\\n                    msg.sender,\\n                    block.timestamp\\n                );\\n            } else {\\n                ROUTER.removeLiquidity(\\n                    token0,\\n                    token1,\\n                    amount,\\n                    0,\\n                    0,\\n                    msg.sender,\\n                    block.timestamp\\n                );\\n            }\\n        }\\n    }\\n\\n    /* ========== Private Functions ========== */\\n\\n    function _approveTokenIfNeeded(address token) private {\\n        if (IERC20(token).allowance(address(this), address(ROUTER)) == 0) {\\n            IERC20(token).safeApprove(address(ROUTER), uint256(~0));\\n        }\\n    }\\n\\n    function _swapAVAXToLP(\\n        address lp,\\n        uint256 amount,\\n        address receiver\\n    ) private {\\n        if (!isLP(lp)) {\\n            _swapAVAXForToken(lp, amount, receiver);\\n        } else {\\n            // lp\\n            IJoePair pair = IJoePair(lp);\\n            address token0 = pair.token0();\\n            address token1 = pair.token1();\\n            if (token0 == WAVAX || token1 == WAVAX) {\\n                address token = token0 == WAVAX ? token1 : token0;\\n                uint256 swapValue = amount.div(2);\\n                uint256 tokenAmount = _swapAVAXForToken(\\n                    token,\\n                    swapValue,\\n                    address(this)\\n                );\\n\\n                _approveTokenIfNeeded(token);\\n                ROUTER.addLiquidityAVAX{value: amount.sub(swapValue)}(\\n                    token,\\n                    tokenAmount,\\n                    0,\\n                    0,\\n                    receiver,\\n                    block.timestamp\\n                );\\n            } else {\\n                uint256 swapValue = amount.div(2);\\n                uint256 token0Amount = _swapAVAXForToken(\\n                    token0,\\n                    swapValue,\\n                    address(this)\\n                );\\n                uint256 token1Amount = _swapAVAXForToken(\\n                    token1,\\n                    amount.sub(swapValue),\\n                    address(this)\\n                );\\n\\n                _approveTokenIfNeeded(token0);\\n                _approveTokenIfNeeded(token1);\\n                ROUTER.addLiquidity(\\n                    token0,\\n                    token1,\\n                    token0Amount,\\n                    token1Amount,\\n                    0,\\n                    0,\\n                    receiver,\\n                    block.timestamp\\n                );\\n            }\\n        }\\n    }\\n\\n    function _swapAVAXForToken(\\n        address token,\\n        uint256 value,\\n        address receiver\\n    ) private returns (uint256) {\\n        address[] memory path;\\n\\n        if (routePairAddresses[token] != address(0)) {\\n            path = new address[](3);\\n            path[0] = WAVAX;\\n            path[1] = routePairAddresses[token];\\n            path[2] = token;\\n        } else {\\n            path = new address[](2);\\n            path[0] = WAVAX;\\n            path[1] = token;\\n        }\\n\\n        uint256[] memory amounts = ROUTER.swapExactAVAXForTokens{value: value}(\\n            0,\\n            path,\\n            receiver,\\n            block.timestamp\\n        );\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    function _swapTokenForAVAX(\\n        address token,\\n        uint256 amount,\\n        address receiver\\n    ) private returns (uint256) {\\n        address[] memory path;\\n        if (routePairAddresses[token] != address(0)) {\\n            path = new address[](3);\\n            path[0] = token;\\n            path[1] = routePairAddresses[token];\\n            path[2] = WAVAX;\\n        } else {\\n            path = new address[](2);\\n            path[0] = token;\\n            path[1] = WAVAX;\\n        }\\n\\n        uint256[] memory amounts = ROUTER.swapExactTokensForAVAX(\\n            amount,\\n            0,\\n            path,\\n            receiver,\\n            block.timestamp\\n        );\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    function _swap(\\n        address _from,\\n        uint256 amount,\\n        address _to,\\n        address receiver\\n    ) private returns (uint256) {\\n        address intermediate = routePairAddresses[_from];\\n        if (intermediate == address(0)) {\\n            intermediate = routePairAddresses[_to];\\n        }\\n\\n        address[] memory path;\\n        if (intermediate != address(0) && (_from == WAVAX || _to == WAVAX)) {\\n            // [WAVAX, BUSD, VAI] or [VAI, BUSD, WAVAX]\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = intermediate;\\n            path[2] = _to;\\n        } else if (\\n            intermediate != address(0) &&\\n            (_from == intermediate || _to == intermediate)\\n        ) {\\n            // [VAI, BUSD] or [BUSD, VAI]\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else if (\\n            intermediate != address(0) &&\\n            routePairAddresses[_from] == routePairAddresses[_to]\\n        ) {\\n            // [VAI, DAI] or [VAI, USDC]\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = intermediate;\\n            path[2] = _to;\\n        } else if (\\n            routePairAddresses[_from] != address(0) &&\\n            routePairAddresses[_to] != address(0) &&\\n            routePairAddresses[_from] != routePairAddresses[_to]\\n        ) {\\n            // routePairAddresses[xToken] = xRoute\\n            // [VAI, BUSD, WAVAX, xRoute, xToken]\\n            path = new address[](5);\\n            path[0] = _from;\\n            path[1] = routePairAddresses[_from];\\n            path[2] = WAVAX;\\n            path[3] = routePairAddresses[_to];\\n            path[4] = _to;\\n        } else if (\\n            intermediate != address(0) &&\\n            routePairAddresses[_from] != address(0)\\n        ) {\\n            // [VAI, BUSD, WAVAX, BUNNY]\\n            path = new address[](4);\\n            path[0] = _from;\\n            path[1] = intermediate;\\n            path[2] = WAVAX;\\n            path[3] = _to;\\n        } else if (\\n            intermediate != address(0) && routePairAddresses[_to] != address(0)\\n        ) {\\n            // [BUNNY, WAVAX, BUSD, VAI]\\n            path = new address[](4);\\n            path[0] = _from;\\n            path[1] = WAVAX;\\n            path[2] = intermediate;\\n            path[3] = _to;\\n        } else if (_from == WAVAX || _to == WAVAX) {\\n            // [WAVAX, BUNNY] or [BUNNY, WAVAX]\\n            path = new address[](2);\\n            path[0] = _from;\\n            path[1] = _to;\\n        } else {\\n            // [USDT, BUNNY] or [BUNNY, USDT]\\n            path = new address[](3);\\n            path[0] = _from;\\n            path[1] = WAVAX;\\n            path[2] = _to;\\n        }\\n\\n        uint256[] memory amounts = ROUTER.swapExactTokensForTokens(\\n            amount,\\n            0,\\n            path,\\n            receiver,\\n            block.timestamp\\n        );\\n        return amounts[amounts.length - 1];\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function setRoutePairAddress(address asset, address route)\\n        external\\n        onlyOwner\\n    {\\n        routePairAddresses[asset] = route;\\n    }\\n\\n    function setNotLP(address token) public onlyOwner {\\n        bool needPush = notLP[token] == false;\\n        notLP[token] = true;\\n        if (needPush) {\\n            tokens.push(token);\\n        }\\n    }\\n\\n    function removeToken(uint256 i) external onlyOwner {\\n        address token = tokens[i];\\n        notLP[token] = false;\\n        tokens[i] = tokens[tokens.length - 1];\\n        tokens.pop();\\n    }\\n\\n    function sweep() external onlyOwner {\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            address token = tokens[i];\\n            if (token == address(0)) continue;\\n            uint256 amount = IERC20(token).balanceOf(address(this));\\n            if (amount > 0) {\\n                if (token == WAVAX) {\\n                    IWAVAX(token).withdraw(amount);\\n                } else {\\n                    _swapTokenForAVAX(token, amount, owner());\\n                }\\n            }\\n        }\\n\\n        uint256 balance = address(this).balance;\\n        if (balance > 0) {\\n            payable(owner()).transfer(balance);\\n        }\\n    }\\n\\n    function withdraw(address token) external onlyOwner {\\n        if (token == address(0)) {\\n            payable(owner()).transfer(address(this).balance);\\n            return;\\n        }\\n\\n        IERC20(token).transfer(owner(), IERC20(token).balanceOf(address(this)));\\n    }\\n}\\n\",\"keccak256\":\"0xa545fafe49a8ba38a10b7f32e7a896064fdcab9af0087992a27dc76c149c4016\",\"license\":\"MIT\"},\"contracts/traderjoe/interfaces/IJoePair.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IJoePair {\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to)\\n        external\\n        returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x99463be47c4a46661a39e53bc0dd17cd3cab3241dc67b6dd1df920d81a8951a0\",\"license\":\"GPL-3.0\"},\"contracts/traderjoe/interfaces/IJoeRouter01.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.2;\\n\\ninterface IJoeRouter01 {\\n    function factory() external pure returns (address);\\n\\n    function WAVAX() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityAVAX(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountAVAX,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAX(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityAVAXWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactAVAXForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactAVAX(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForAVAX(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapAVAXForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xc4b21795190d167f46ee29b22f797439006946e995f88bc95ef128f4e0333dda\",\"license\":\"GPL-3.0\"},\"contracts/traderjoe/interfaces/IJoeRouter02.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.6.2;\\n\\nimport \\\"./IJoeRouter01.sol\\\";\\n\\ninterface IJoeRouter02 is IJoeRouter01 {\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountAVAX);\\n\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountAVAX);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe0bea03fe60c0b819d5070049bac4b93650083aba173ccd1fa3c3ce665bf43ca\",\"license\":\"GPL-3.0\"},\"contracts/traderjoe/interfaces/IWAVAX.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.5.0;\\n\\ninterface IWAVAX {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xe27c60dfc6c96598a015783780e2fd5b2adbbffbdb0a8925553dfd91447d6742\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612ea8806100206000396000f3fe6080604052600436106101185760003560e01c806373b295c2116100a0578063d9139f6311610064578063d9139f6314610398578063e0bab4c4146103d1578063f2fde38b146103e6578063fe47068d14610419578063ffebad301461043f5761011f565b806373b295c2146102df5780637df0f767146102f45780638da5cb5b1461033b578063985c9d5614610350578063c54e44eb146103835761011f565b806336c5d724116100e757806336c5d724146101ec578063485cc955146102165780634f64b2be1461025157806351cff8d914610297578063715018a6146102ca5761011f565b80631c286c8a146101245780631c4009f9146101615780631eff9adb146101a457806335faa416146101d75761011f565b3661011f57005b600080fd5b34801561013057600080fd5b5061015f6004803603604081101561014757600080fd5b506001600160a01b0381358116916020013516610454565b005b34801561016d57600080fd5b5061015f6004803603606081101561018457600080fd5b506001600160a01b038135811691602081013591604090910135166104da565b3480156101b057600080fd5b5061015f600480360360208110156101c757600080fd5b50356001600160a01b0316610767565b3480156101e357600080fd5b5061015f61083e565b3480156101f857600080fd5b5061015f6004803603602081101561020f57600080fd5b5035610a43565b34801561022257600080fd5b5061015f6004803603604081101561023957600080fd5b506001600160a01b0381358116916020013516610b71565b34801561025d57600080fd5b5061027b6004803603602081101561027457600080fd5b5035610d18565b604080516001600160a01b039092168252519081900360200190f35b3480156102a357600080fd5b5061015f600480360360208110156102ba57600080fd5b50356001600160a01b0316610d3f565b3480156102d657600080fd5b5061015f610eed565b3480156102eb57600080fd5b5061027b610f8f565b34801561030057600080fd5b506103276004803603602081101561031757600080fd5b50356001600160a01b0316610fa1565b604080519115158252519081900360200190f35b34801561034757600080fd5b5061027b610fc0565b34801561035c57600080fd5b5061027b6004803603602081101561037357600080fd5b50356001600160a01b0316610fcf565b34801561038f57600080fd5b5061027b610fed565b3480156103a457600080fd5b5061015f600480360360408110156103bb57600080fd5b506001600160a01b038135169060200135611005565b3480156103dd57600080fd5b5061027b6112dd565b3480156103f257600080fd5b5061015f6004803603602081101561040957600080fd5b50356001600160a01b03166112f5565b61015f6004803603602081101561042f57600080fd5b50356001600160a01b03166113ee565b34801561044b57600080fd5b5061027b6113f9565b61045c611408565b6033546001600160a01b039081169116146104ac576040805162461bcd60e51b81526020600482018190526024820152600080516020612dd3833981519152604482015290519081900360640190fd5b6001600160a01b03918216600090815260686020526040902080546001600160a01b03191691909216179055565b6104ef6001600160a01b03841633308561140c565b6104f883611466565b61050181610fa1565b156107545760008190506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561054657600080fd5b505afa15801561055a573d6000803e3d6000fd5b505050506040513d602081101561057057600080fd5b50516040805163d21220a760e01b815290519192506000916001600160a01b0385169163d21220a7916004808301926020929190829003018186803b1580156105b857600080fd5b505afa1580156105cc573d6000803e3d6000fd5b505050506040513d60208110156105e257600080fd5b505190506001600160a01b0386811690831614806106115750806001600160a01b0316866001600160a01b0316145b15610730576000826001600160a01b0316876001600160a01b0316146106375782610639565b815b905061064481611466565b6000610651876002611505565b905060006106618983853061156c565b6066549091506001600160a01b031663e8e337008a856106818c87611dd3565b604080516001600160e01b031960e087901b1681526001600160a01b03948516600482015292909316602483015260448201526064810185905260006084820181905260a482018190523360c48301524260e483015291516101048083019360609383900390910190829087803b1580156106fb57600080fd5b505af115801561070f573d6000803e3d6000fd5b505050506040513d606081101561072557600080fd5b5061074c9350505050565b600061073d878730611e30565b905061074a858233612162565b505b505050610762565b6107608383833361156c565b505b505050565b61076f611408565b6033546001600160a01b039081169116146107bf576040805162461bcd60e51b81526020600482018190526024820152600080516020612dd3833981519152604482015290519081900360640190fd5b6001600160a01b0381166000908152606760205260409020805460ff19811660011790915560ff1615801561083a57606980546001810182556000919091527f7fb4302e8e91f9110a6554c2c0a24601252c2a42c2220ca988efcfe3999143080180546001600160a01b0319166001600160a01b0384161790555b5050565b610846611408565b6033546001600160a01b03908116911614610896576040805162461bcd60e51b81526020600482018190526024820152600080516020612dd3833981519152604482015290519081900360640190fd5b60005b6069548110156109f8576000606982815481106108b257fe5b6000918252602090912001546001600160a01b03169050806108d457506109f0565b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561092357600080fd5b505afa158015610937573d6000803e3d6000fd5b505050506040513d602081101561094d57600080fd5b5051905080156109ed576001600160a01b038216600080516020612df383398151915214156109d957816001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156109bc57600080fd5b505af11580156109d0573d6000803e3d6000fd5b505050506109ed565b6109eb82826109e6610fc0565b611e30565b505b50505b600101610899565b50478015610a4057610a08610fc0565b6001600160a01b03166108fc829081150290604051600060405180830381858888f1935050505015801561083a573d6000803e3d6000fd5b50565b610a4b611408565b6033546001600160a01b03908116911614610a9b576040805162461bcd60e51b81526020600482018190526024820152600080516020612dd3833981519152604482015290519081900360640190fd5b600060698281548110610aaa57fe5b60009182526020808320909101546001600160a01b031680835260679091526040909120805460ff1916905560698054919250906000198101908110610aec57fe5b600091825260209091200154606980546001600160a01b039092169184908110610b1257fe5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506069805480610b4b57fe5b600082815260209020810160001990810180546001600160a01b03191690550190555050565b600054610100900460ff1680610b8a5750610b8a6124ae565b80610b98575060005460ff16155b610bd35760405162461bcd60e51b815260040180806020018281038252602e815260200180612da5602e913960400191505060405180910390fd5b600054610100900460ff16158015610bfe576000805460ff1961ff0019909116610100171660011790555b610c066124b4565b6000610c10610fc0565b6001600160a01b03161415610c6c576040805162461bcd60e51b815260206004820152601960248201527f5a61704554483a206f776e6572206d7573742062652073657400000000000000604482015290519081900360640190fd5b606580546001600160a01b038086166001600160a01b0319928316179092556066805492851692909116919091179055610cb3600080516020612df3833981519152610767565b610cd073de3a24028580884448a5397872046a019649b084610767565b606554610ce5906001600160a01b0316610767565b610d0273ba7deebbfc5fa1100fb055a87773e1e99cd3507a610767565b8015610762576000805461ff0019169055505050565b60698181548110610d2557fe5b6000918252602090912001546001600160a01b0316905081565b610d47611408565b6033546001600160a01b03908116911614610d97576040805162461bcd60e51b81526020600482018190526024820152600080516020612dd3833981519152604482015290519081900360640190fd5b6001600160a01b038116610deb57610dad610fc0565b6001600160a01b03166108fc479081150290604051600060405180830381858888f19350505050158015610de5573d6000803e3d6000fd5b50610a40565b806001600160a01b031663a9059cbb610e02610fc0565b604080516370a0823160e01b815230600482015290516001600160a01b038616916370a08231916024808301926020929190829003018186803b158015610e4857600080fd5b505afa158015610e5c573d6000803e3d6000fd5b505050506040513d6020811015610e7257600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b158015610ec357600080fd5b505af1158015610ed7573d6000803e3d6000fd5b505050506040513d602081101561076257600080fd5b610ef5611408565b6033546001600160a01b03908116911614610f45576040805162461bcd60e51b81526020600482018190526024820152600080516020612dd3833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b600080516020612df383398151915281565b6001600160a01b031660009081526067602052604090205460ff161590565b6033546001600160a01b031690565b6001600160a01b039081166000908152606860205260409020541690565b73de3a24028580884448a5397872046a019649b08481565b61101a6001600160a01b03831633308461140c565b61102382611466565b61102c82610fa1565b6110415761103b828233611e30565b5061083a565b60008290506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561108157600080fd5b505afa158015611095573d6000803e3d6000fd5b505050506040513d60208110156110ab57600080fd5b50516040805163d21220a760e01b815290519192506000916001600160a01b0385169163d21220a7916004808301926020929190829003018186803b1580156110f357600080fd5b505afa158015611107573d6000803e3d6000fd5b505050506040513d602081101561111d57600080fd5b505190506001600160a01b038216600080516020612df3833981519152148061115c57506001600160a01b038116600080516020612df3833981519152145b15611230576066546001600160a01b03908116906333c6b725908416600080516020612df383398151915214156111935782611195565b835b604080516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201889052600060448301819052606483018190523360848401524260a4840152815160c4808501949192918390030190829087803b1580156111fe57600080fd5b505af1158015611212573d6000803e3d6000fd5b505050506040513d604081101561122857600080fd5b506112d69050565b60665460408051635d5155ef60e11b81526001600160a01b038581166004830152848116602483015260448201889052600060648301819052608483018190523360a48401524260c48401528351919094169363baa2abde9360e480850194919392918390030190829087803b1580156112a957600080fd5b505af11580156112bd573d6000803e3d6000fd5b505050506040513d60408110156112d357600080fd5b50505b5050505050565b73ba7deebbfc5fa1100fb055a87773e1e99cd3507a81565b6112fd611408565b6033546001600160a01b0390811691161461134d576040805162461bcd60e51b81526020600482018190526024820152600080516020612dd3833981519152604482015290519081900360640190fd5b6001600160a01b0381166113925760405162461bcd60e51b8152600401808060200182810382526026815260200180612d596026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b610a40813433612162565b6065546001600160a01b031681565b3390565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b179052610760908590612565565b60665460408051636eb1769f60e11b81523060048201526001600160a01b03928316602482015290519183169163dd62ed3e91604480820192602092909190829003018186803b1580156114b957600080fd5b505afa1580156114cd573d6000803e3d6000fd5b505050506040513d60208110156114e357600080fd5b5051610a4057606654610a40906001600160a01b038381169116600019612616565b600080821161155b576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161156457fe5b049392505050565b6001600160a01b03808516600090815260686020526040812054909116806115ab57506001600160a01b03808416600090815260686020526040902054165b60606001600160a01b038216158015906115fb57506001600160a01b038716600080516020612df383398151915214806115fb57506001600160a01b038516600080516020612df3833981519152145b156116c157600360005b5060405190808252806020026020018201604052801561162f578160200160208202803683370190505b509050868160008151811061164057fe5b60200260200101906001600160a01b031690816001600160a01b031681525050818160018151811061166e57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848160028151811061169c57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050611c1e565b6001600160a01b038216158015906117055750816001600160a01b0316876001600160a01b031614806117055750816001600160a01b0316856001600160a01b0316145b1561177857600260005b50604051908082528060200260200182016040528015611739578160200160208202803683370190505b509050868160008151811061174a57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061169c57fe5b6001600160a01b038216158015906117b457506001600160a01b03808616600090815260686020526040808220548a8416835291205482169116145b156117c25760036000611605565b6001600160a01b03878116600090815260686020526040902054161580159061180457506001600160a01b038581166000908152606860205260409020541615155b801561183557506001600160a01b03808616600090815260686020526040808220548a841683529120548216911614155b1561194f5760408051600580825260c08201909252906020820160a080368337019050509050868160008151811061186957fe5b6001600160a01b039283166020918202929092018101919091528882166000908152606890915260409020548251911690829060019081106118a757fe5b60200260200101906001600160a01b031690816001600160a01b031681525050600080516020612df3833981519152816002815181106118e357fe5b6001600160a01b0392831660209182029290920181019190915286821660009081526068909152604090205482519116908290600390811061192157fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848160048151811061169c57fe5b6001600160a01b0382161580159061198057506001600160a01b038781166000908152606860205260409020541615155b15611a4c5760408051600480825260a08201909252906020820160808036833701905050905086816000815181106119b457fe5b60200260200101906001600160a01b031690816001600160a01b03168152505081816001815181106119e257fe5b60200260200101906001600160a01b031690816001600160a01b031681525050600080516020612df383398151915281600281518110611a1e57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848160038151811061169c57fe5b6001600160a01b03821615801590611a7d57506001600160a01b038581166000908152606860205260409020541615155b15611b1b5760408051600480825260a0820190925290602082016080803683370190505090508681600081518110611ab157fe5b60200260200101906001600160a01b031690816001600160a01b031681525050600080516020612df383398151915281600181518110611aed57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508181600281518110611a1e57fe5b6001600160a01b038716600080516020612df38339815191521480611b5657506001600160a01b038516600080516020612df3833981519152145b15611b64576002600061170f565b6040805160038082526080820190925290602082016060803683370190505090508681600081518110611b9357fe5b60200260200101906001600160a01b031690816001600160a01b031681525050600080516020612df383398151915281600181518110611bcf57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508481600281518110611bfd57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b6060606660009054906101000a90046001600160a01b03166001600160a01b03166338ed17398860008589426040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015611cba578181015183820152602001611ca2565b505050509050019650505050505050600060405180830381600087803b158015611ce357600080fd5b505af1158015611cf7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611d2057600080fd5b8101908080516040519392919084640100000000821115611d4057600080fd5b908301906020820185811115611d5557600080fd5b8251866020820283011164010000000082111715611d7257600080fd5b82525081516020918201928201910280838360005b83811015611d9f578181015183820152602001611d87565b50505050905001604052505050905080600182510381518110611dbe57fe5b60200260200101519350505050949350505050565b600082821115611e2a576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6001600160a01b0383811660009081526068602052604081205490916060911615611f23576040805160038082526080820190925290602082016060803683370190505090508481600081518110611e8457fe5b6001600160a01b03928316602091820292909201810191909152868216600090815260689091526040902054825191169082906001908110611ec257fe5b60200260200101906001600160a01b031690816001600160a01b031681525050600080516020612df383398151915281600281518110611efe57fe5b60200260200101906001600160a01b031690816001600160a01b031681525050611fae565b60408051600280825260608201835290916020830190803683370190505090508481600081518110611f5157fe5b60200260200101906001600160a01b031690816001600160a01b031681525050600080516020612df383398151915281600181518110611f8d57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b6060606660009054906101000a90046001600160a01b03166001600160a01b031663676528d18660008588426040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b8381101561204a578181015183820152602001612032565b505050509050019650505050505050600060405180830381600087803b15801561207357600080fd5b505af1158015612087573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156120b057600080fd5b81019080805160405193929190846401000000008211156120d057600080fd5b9083019060208201858111156120e557600080fd5b825186602082028301116401000000008211171561210257600080fd5b82525081516020918201928201910280838360005b8381101561212f578181015183820152602001612117565b5050505090500160405250505090508060018251038151811061214e57fe5b6020026020010151925050505b9392505050565b61216b83610fa1565b6121805761217a838383612729565b50610762565b60008390506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156121c057600080fd5b505afa1580156121d4573d6000803e3d6000fd5b505050506040513d60208110156121ea57600080fd5b50516040805163d21220a760e01b815290519192506000916001600160a01b0385169163d21220a7916004808301926020929190829003018186803b15801561223257600080fd5b505afa158015612246573d6000803e3d6000fd5b505050506040513d602081101561225c57600080fd5b505190506001600160a01b038216600080516020612df3833981519152148061229b57506001600160a01b038116600080516020612df3833981519152145b156123ab5760006001600160a01b038316600080516020612df3833981519152146122c657826122c8565b815b905060006122d7876002611505565b905060006122e6838330612729565b90506122f183611466565b6066546001600160a01b031663f91b3f7261230c8a85611dd3565b604080516001600160e01b031960e085901b1681526001600160a01b0380891660048301526024820187905260006044830181905260648301528c1660848201524260a4820152905160c480830192606092919082900301818588803b15801561237557600080fd5b505af1158015612389573d6000803e3d6000fd5b50505050506040513d60608110156123a057600080fd5b506124a69350505050565b60006123b8866002611505565b905060006123c7848330612729565b905060006123df846123d98a86611dd3565b30612729565b90506123ea85611466565b6123f384611466565b6066546040805162e8e33760e81b81526001600160a01b0388811660048301528781166024830152604482018690526064820185905260006084830181905260a483018190528b821660c48401524260e4840152925193169263e8e337009261010480840193606093929083900390910190829087803b15801561247657600080fd5b505af115801561248a573d6000803e3d6000fd5b505050506040513d60608110156124a057600080fd5b50505050505b505050505050565b303b1590565b600054610100900460ff16806124cd57506124cd6124ae565b806124db575060005460ff16155b6125165760405162461bcd60e51b815260040180806020018281038252602e815260200180612da5602e913960400191505060405180910390fd5b600054610100900460ff16158015612541576000805460ff1961ff0019909116610100171660011790555b6125496129a2565b612551612a42565b8015610a40576000805461ff001916905550565b60606125ba826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316612b3b9092919063ffffffff16565b805190915015610762578080602001905160208110156125d957600080fd5b50516107625760405162461bcd60e51b815260040180806020018281038252602a815260200180612e13602a913960400191505060405180910390fd5b80158061269c575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561266e57600080fd5b505afa158015612682573d6000803e3d6000fd5b505050506040513d602081101561269857600080fd5b5051155b6126d75760405162461bcd60e51b8152600401808060200182810382526036815260200180612e3d6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610762908490612565565b6001600160a01b038381166000908152606860205260408120549091606091161561281c57604080516003808252608082019092529060208201606080368337019050509050600080516020612df38339815191528160008151811061278b57fe5b6001600160a01b039283166020918202929092018101919091528682166000908152606890915260409020548251911690829060019081106127c957fe5b60200260200101906001600160a01b031690816001600160a01b03168152505084816002815181106127f757fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506128a7565b6040805160028082526060820183529091602083019080368337019050509050600080516020612df38339815191528160008151811061285857fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061288657fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b6060606660009054906101000a90046001600160a01b03166001600160a01b031663a2a1623d8660008588426040518663ffffffff1660e01b81526004018085815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b8381101561293d578181015183820152602001612925565b50505050905001955050505050506000604051808303818588803b15801561296457600080fd5b505af1158015612978573d6000803e3d6000fd5b50505050506040513d6000823e601f3d908101601f1916820160405260208110156120b057600080fd5b600054610100900460ff16806129bb57506129bb6124ae565b806129c9575060005460ff16155b612a045760405162461bcd60e51b815260040180806020018281038252602e815260200180612da5602e913960400191505060405180910390fd5b600054610100900460ff16158015612551576000805460ff1961ff0019909116610100171660011790558015610a40576000805461ff001916905550565b600054610100900460ff1680612a5b5750612a5b6124ae565b80612a69575060005460ff16155b612aa45760405162461bcd60e51b815260040180806020018281038252602e815260200180612da5602e913960400191505060405180910390fd5b600054610100900460ff16158015612acf576000805460ff1961ff0019909116610100171660011790555b6000612ad9611408565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610a40576000805461ff001916905550565b6060612b4a8484600085612b52565b949350505050565b606082471015612b935760405162461bcd60e51b8152600401808060200182810382526026815260200180612d7f6026913960400191505060405180910390fd5b612b9c85612cae565b612bed576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b60208310612c2c5780518252601f199092019160209182019101612c0d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612c8e576040519150601f19603f3d011682016040523d82523d6000602084013e612c93565b606091505b5091509150612ca3828286612cb4565b979650505050505050565b3b151590565b60608315612cc357508161215b565b825115612cd35782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612d1d578181015183820152602001612d05565b50505050905090810190601f168015612d4a5780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66c75361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a264697066735822122064134e92553c322c245f3afb0dbedc34bf0d9d13a1961144ac4801a79a4e2fcd64736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 180,
        "contract": "contracts/Zap.sol:Zap",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 183,
        "contract": "contracts/Zap.sol:Zap",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 43,
        "contract": "contracts/Zap.sol:Zap",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 55,
        "contract": "contracts/Zap.sol:Zap",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 173,
        "contract": "contracts/Zap.sol:Zap",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8665,
        "contract": "contracts/Zap.sol:Zap",
        "label": "JOE",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 8676,
        "contract": "contracts/Zap.sol:Zap",
        "label": "ROUTER",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IJoeRouter02)24430"
      },
      {
        "astId": 8680,
        "contract": "contracts/Zap.sol:Zap",
        "label": "notLP",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 8684,
        "contract": "contracts/Zap.sol:Zap",
        "label": "routePairAddresses",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 8687,
        "contract": "contracts/Zap.sol:Zap",
        "label": "tokens",
        "offset": 0,
        "slot": "105",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IJoeRouter02)24430": {
        "encoding": "inplace",
        "label": "contract IJoeRouter02",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}